#!/usr/bin/env bash

# Sam Cacela
# September 4, 2020
# Trash Buddy is a file that helps you manage the things you typically discard with rm.
# Trash Buddy performs an mv command to move the item(s) to a trash folder, and keeps a record of the things you discard in a text file.

init_vars()
{
command_name=tb

color_none="\033[0m"
color_black="\033[0;30m"
color_red="\033[0;31m"
color_green="\033[0;32m"
color_yellow="\033[0;33m"
color_blue="\033[0;34m"
color_magenta="\033[0;35m"
color_cyan="\033[0;36m"
color_light_gray="\033[0;37m"

color_a=${color_magenta}
color_b=${color_blue}
color_info_file=${color_green}
color_user_input=${color_cyan}
}

show_options()
{
options_str=$(cat <<- EOF

Options:

Flags               Description                                                                   Example Usage

-h  | --help        Show options.                                                                 ${command_name} -h
-i  | --info        a. Show deleted items in your record file by name and recovery path.          ${command_name} -i
                    b. Show lines in your record file that contain user-input string.             ${command_name} -i string_a string_b
-t  | --trash-path  Show the path to your trash folder.                                           ${command_name} -t
<no flags>          Move any file or directory paths that follow to ${trash_parent_dir} with mv.  ${command_name} item_a item_b
EOF
)
echo -e "${options_str}\n" # in quotes to prevent field splitting in echo from eating spaces
return
}

color_restore()
{
echo -e "${color_none}" # restore to no color
}

handle_params()
{
local datetime=$(date "+%b_%d_%Y_%H_%M")
local trash_parent_dir="~/.trashbuddy_trashcan"

# expand $HOME, ${HOME} and ~
trash_parent_dir=$(echo ${trash_parent_dir} | sed -e "s|^~|${HOME}|g") # replace ~ with expanded ${HOME}
trash_parent_dir=$(echo ${trash_parent_dir} | sed -e "s|^\$HOME|${HOME}|g") # replace literal $HOME with expanded ${HOME}
trash_parent_dir=$(echo ${trash_parent_dir} | sed -e "s|^\${HOME}|${HOME}|g") # replace literal ${HOME} with expanded ${HOME}

mkdir -p ${trash_parent_dir}
local infopath=${trash_parent_dir}/info.txt
touch ${infopath}

local options_str=""
local tab="    "
local linecount=0

while test $# -ge 1; do
	case $1 in
		-t|--trash-path)
			echo ${trash_parent_dir}
			return
			;;
		-h|--help)
			show_options
			return
			;;
		-i|--info)
			echo
			if [ ! -s ${infopath} ]; then # check if empty based on file size
				echo -e "No entries in info file, ${color_info_file}${infopath}${color_none}."
				return
			elif test $# -ge 2; then
				while test $# -ge 2; do
					if [ "$(cat ${infopath} | grep -- $2)" == "" ]; then
						echo -e "No lines contain ${color_user_input}$2${color_none} in info file, ${color_info_file}${infopath}${color_none}."
					else
						# print the file
						cat ${infopath} | grep $2 | while IFS='' read -r line; do
							if test $(($linecount%2)) -eq 0; then
								echo -e "${color_a}${line}"
							else
								echo -e "${color_b}${line}"
							fi
							((linecount++))
						done

						linecount=0
						color_restore

						echo -e "Item\tRecovery Path\n"
						echo -e "Lines containing ${color_user_input}$2${color_none} in info file, ${color_info_file}${infopath}${color_none}.\n"	
					fi
					shift
				done
				return
			else
				# print the file
				cat ${infopath} | while IFS='' read -r line; do
					if test $(($linecount%2)) -eq 0; then
						echo -e "${color_a}${line}"
					else
						echo -e "${color_b}${line}"
					fi
					((linecount++))
				done

				linecount=0
				color_restore

				echo -e "Item\tRecovery Path\n"
				echo -e "Contents of info file, ${color_info_file}${infopath}${color_none}.\n"
				return
			fi
			return
			;;
		*)
			if test -e "$1"; then
				# success
				mkdir -p ${trash_parent_dir}/${datetime}/
				mv "$1" ${trash_parent_dir}/${datetime}/
				echo -e "$1\t${trash_parent_dir}/${datetime}/" >> ${infopath}
				shift
			else
				echo -e "\n${color_red}Error:${color_none} The item you are trying to discard, ${color_user_input}$1${color_none}, does not exist. Please see options."
				show_options
				return
			fi
	esac
done
}

main()
{
init_vars
handle_params "$@"
}

main "$@"

